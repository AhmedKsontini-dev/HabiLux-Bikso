<div class="container py-4" id="form-container">
    <div class="card shadow p-4">

        <!-- Form Title -->
        <h4 class="text-center mb-4">Contrat Location Vente</h4>

        <!-- Form Start -->
        {{ form_start(form, {'attr': {'class': 'needs-validation'}}) }}

        <!-- 1. Informations des Parties -->
        <div class="row mb-4">
            <h5>1. Informations des Parties</h5>
            <div class="col-md-3">
                {{ form_label(form.nomAcheteur, 'Nom de l\'Acheteur', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.nomAcheteur, {'attr': {'class': 'form-control'}}) }}
                {{ form_errors(form.nomAcheteur) }}
            </div>
            <div class="col-md-3">
                {{ form_label(form.adresseAcheteur, 'Adresse de l\'Acheteur', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.adresseAcheteur, {'attr': {'class': 'form-control'}}) }}
                {{ form_errors(form.adresseAcheteur) }}
            </div>
            <div class="col-md-3">
                {{ form_label(form.cinAcheteur, 'cin de l\'Acheteur', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.cinAcheteur, {'attr': {'class': 'form-control'}}) }}
                {{ form_errors(form.cinAcheteur) }}
            </div>
            <div class="col-md-3">
                {{ form_label(form.telAcheteur, 'tel de l\'Acheteur', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.telAcheteur, {'attr': {'class': 'form-control'}}) }}
                {{ form_errors(form.telAcheteur) }}
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-md-3">
                {{ form_label(form.nomVendeur, 'Nom du Vendeur', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.nomVendeur, {'attr': {'class': 'form-control'}}) }}
                {{ form_errors(form.nomVendeur) }}
            </div>

            <div class="col-md-3">
                {{ form_label(form.posteVendeur, 'Poste de vendeur', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.posteVendeur, {'attr': {'class': 'form-control'}}) }}
                {{ form_errors(form.posteVendeur) }}
            </div>
            <div class="col-md-3">
                {{ form_label(form.mailVendeur, 'E-mail du Vendeur', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.mailVendeur) }}
                {{ form_errors(form.mailVendeur) }}
            </div>
            <div class="col-md-3">
                {{ form_label(form.telVendeur, 'Telephone de vendeur', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.telVendeur, {'attr': {'class': 'form-control'}}) }}
                {{ form_errors(form.telVendeur) }}
            </div>
        </div>

        <div class="row mb-4">
            <h5>2. Informations de transaction</h5>
            <div class="col-md-3">
                {{ form_label(form.typeTransaction, 'Type de Transaction', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.typeTransaction, {'attr': {'class': 'form-control', 'id': 'typeTransaction'}}) }}
                {{ form_errors(form.typeTransaction) }}
            </div>
            <div class="col-md-3">
                {{ form_label(form.bien, 'Reference de bien', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.bien, {'attr': {'class': 'form-control', 'id': 'bien-select'}}) }}
                {{ form_errors(form.bien) }}
            </div>
            <div class="col-md-3">
                {{ form_label(form.statutTransaction, 'Statut de Transaction', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.statutTransaction, {'attr': {'class': 'form-control'}}) }}
                {{ form_errors(form.statutTransaction) }}
            </div>
        </div>

        <div class="row mb-4">
            <i class="bi bi-dash-circle" onclick="toggleVisibility('commissionSection')"></i>
            <div class="col-md-6" id="commissionSection">
                {{ form_label(form.commission, 'Commission', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.commission, {'attr': {'class': 'form-control'}}) }}
                {{ form_errors(form.commission) }}
            </div>
            <div class="col-md-6">
                {{ form_label(form.payer, 'Payer', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.payer, {'attr': {'class': 'form-select'}}) }}
                {{ form_errors(form.payer) }}
            </div>
        </div>

        <!-- 2. Objet du Contrat -->
        <div class="row mb-4">
            <h5>3. Objet du Contrat</h5>
            <div class="col-md-12">
                {{ form_widget(form.objetContrat, {'attr': {'class': 'form-control'}}) }}
                {{ form_errors(form.objetContrat) }}
            </div>
        </div>

        <!-- 3. Description du Bien -->
        <div class="row mb-4">
            <h5>4. Description du Bien</h5>
            <div class="col-md-12">
                {{ form_widget(form.descriptionBien, {
                    'attr': {
                        'class': 'form-control', 
                        'id': 'description-bien',
                        'readonly': true,
                        'rows': 8,
                        'style': 'background-color: #f8f9fa; cursor: not-allowed;'
                    }
                }) }}
                {{ form_errors(form.descriptionBien) }}
                <small class="text-muted">
                    <i class="bi bi-info-circle"></i> 
                    Cette description est automatiquement remplie selon le bien sélectionné.
                </small>
            </div>
        </div>

        <!-- 4. Prix de Vente et Modalités de Paiement -->
        <div class="row mb-4">
            <h5>5. Prix de Vente et Modalités de Paiement</h5>
            <div class="col-md-12">
                {{ form_label(form.prixVente, 'Prix de Vente', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.prixVente, {'attr': {'class': 'form-control'}}) }}
                {{ form_errors(form.prixVente) }}
            </div>
        </div>
        <div class="row mb-12">
            <div class="col-md-12">
                {{ form_label(form.modePaiement, 'Mode de Paiement', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.modePaiement, {'attr': {'class': 'form-control'}}) }}
                {{ form_errors(form.modePaiement) }}
            </div>
        </div>

        <!-- 5. Durée de la Location -->
        <div class="row mb-4">
            <div id="locationDurationToggle">
                <h5>6. Durée de la Location <i class="bi bi-dash-circle" onclick="toggleVisibility('locationDurationToggle')"></i></h5>
                <div class="col-md-12" id="locationDurationSection">
                <div class="col-md-6">
                        <label for="debutLocation" class="form-label">Début de Location *</label>
                        <input type="date" class="form-control" id="debutLocation" name="debutLocation" required>
                        <div class="error-message" id="errorDebutLocation"></div>
                    </div>
                    <div class="col-md-6">
                        <label for="finLocation" class="form-label">Fin de Location *</label>
                        <input type="date" class="form-control" id="finLocation" name="finLocation" required>
                        <div class="error-message" id="errorFinLocation"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- 6. Obligations des Parties -->
        <div class="row mb-4">
            <h5>7. Obligations des Parties</h5>
            <div class="col-md-6">
                {{ form_label(form.obligationVendeur, 'Obligations du Vendeur', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.obligationVendeur, {'attr': {'class': 'form-control'}}) }}
                {{ form_errors(form.obligationVendeur) }}
            </div>
            <div class="col-md-6">
                {{ form_label(form.obligationAcheteur, 'Obligations de l\'Acheteur', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.obligationAcheteur, {'attr': {'class': 'form-control'}}) }}
                {{ form_errors(form.obligationAcheteur) }}
            </div>
        </div>

        <!-- 7. Conditions de Résiliation -->
        <div class="row mb-4">
            <h5>8. Conditions de Résiliation</h5>
            <div class="col-md-12">
                {{ form_label(form.conditionsResiliation, 'Conditions de Résiliation', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.conditionsResiliation, {'attr': {'class': 'form-control'}}) }}
                {{ form_errors(form.conditionsResiliation) }}
            </div>
        </div>

        <!-- 8. Confidentialité -->
        <div class="row mb-4">
            <h5>9. Confidentialité</h5>
            <div class="col-md-12">
                {{ form_label(form.confidentialite, 'Clause de Confidentialité', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.confidentialite, {'attr': {'class': 'form-control'}}) }}
                {{ form_errors(form.confidentialite) }}
            </div>
        </div>

        <!-- 11. Déclarations et Signatures -->
        <div class="row mb-4">
            <h5>10. Déclarations et Signatures</h5>
            <div class="col-md-12">
                {{ form_label(form.declaration1, 'Je certifie que les informations fournies sont exactes.', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.declaration1, {'attr': {'class': 'form-check-input'}}) }}
                {{ form_errors(form.declaration1) }}
            </div>

            <div class="col-md-12">
                {{ form_label(form.declaration2, 'J’accepte de respecter toutes les conditions du contrat et de fournir des informations supplémentaires si nécessaire.', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.declaration2, {'attr': {'class': 'form-check-input'}}) }}
                {{ form_errors(form.declaration2) }}
            </div>

            <div class="col-md-6">
                {{ form_label(form.signatureVendeur, 'Signature du Vendeur', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.signatureVendeur, {'attr': {'class': 'form-control'}}) }}
                {{ form_errors(form.signatureVendeur) }}
            </div>

            <div class="col-md-6">
                {{ form_label(form.signatureAcheteur, 'Signature l\'Acheteur', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.signatureAcheteur, {'attr': {'class': 'form-control'}}) }}
                {{ form_errors(form.signatureAcheteur) }}
            </div>
        </div>

        <!-- 12. Date -->
        <div class="row mb-4">
            <h5>11. Date</h5>
            <div class="col-md-12">
                {{ form_label(form.dateTransaction, 'Date de la Transaction', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.dateTransaction, {'attr': {'class': 'form-control'}}) }}
                {{ form_errors(form.dateTransaction) }}
            </div>
        </div>

        <!-- Submit Button -->
        <div class="d-flex justify-content-between mt-3">
            <a href="javascript:history.back()" class="btn btn-secondary">
                <i class="bi bi-arrow-left-circle pe-2"></i>
                Retour
            </a>
            <button type="submit" class="btn btn-primary">
                {{ button_label|default('Enregistrer') }}
            </button>
            <button type="button" class="btn btn-info" onclick="printSection()">
                <i class="bi bi-printer pe-2"></i>
                Imprimer
            </button>
        </div>

        <!-- Form End -->
        {{ form_end(form) }}
    </div>
</div>

<script>
    function toggleVisibility(sectionId) {
        var section = document.getElementById(sectionId);
        var header = section.previousElementSibling;
        
        if (section.style.display === 'none') {
            section.style.display = 'block';
            header.style.display = 'block';
        } else {
            section.style.display = 'none';
            header.style.display = 'none';
        }
    }

    function printSection() {
        // Cacher les éléments que vous ne voulez pas imprimer
        var bodyElements = document.body.children;
        for (var i = 0; i < bodyElements.length; i++) {
            if (bodyElements[i].id !== 'form-container') {
                bodyElements[i].style.display = 'none';
            }
        }

        // Imprimer la section
        window.print();

        // Réafficher les éléments cachés après l'impression
        for (var i = 0; i < bodyElements.length; i++) {
            bodyElements[i].style.display = '';
        }
    }
</script>
<script>
function printSection() {
    const content = document.getElementById("form-container").innerHTML;
    
    const printWindow = window.open('', '', 'height=800,width=1000');

    printWindow.document.write(`
        <html>
        <head>
            <title>Impression Contrat</title>
            <!-- Bootstrap CSS (important pour le même style) -->
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
            <!-- Bootstrap Icons (si tu utilises les icônes comme bi-printer) -->
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
            <style>
                body {
                    padding: 20px;
                }
                .form-label {
                    font-weight: bold;
                }
                h4, h5 {
                    margin-top: 20px;
                    margin-bottom: 15px;
                }
                .btn, .bi {
                    display: none !important; /* Masquer les boutons et icônes à l'impression */
                }
            </style>
        </head>
        <body>
            ${content}
        </body>
        </html>
    `);

    printWindow.document.close();
    printWindow.focus();
    printWindow.print();
}
</script>
<script>
        document.addEventListener('DOMContentLoaded', function() {
            const debutLocation = document.getElementById('debutLocation');
            const finLocation = document.getElementById('finLocation');
            const errorDebutLocation = document.getElementById('errorDebutLocation');
            const errorFinLocation = document.getElementById('errorFinLocation');
            const form = document.getElementById('locationForm');

            // Définir la date minimale (aujourd'hui)
            const today = new Date().toISOString().split('T')[0];
            debutLocation.min = today;
            finLocation.min = today;

            // Fonction pour afficher/masquer les erreurs
            function showError(element, errorElement, message) {
                element.classList.add('error');
                errorElement.textContent = message;
                errorElement.classList.add('show');
            }

            function hideError(element, errorElement) {
                element.classList.remove('error');
                errorElement.classList.remove('show');
            }

            // Validation du champ début
            function validateDebutLocation() {
                const value = debutLocation.value;
                
                if (!value) {
                    showError(debutLocation, errorDebutLocation, 'La date de début est obligatoire.');
                    return false;
                }

                const selectedDate = new Date(value);
                const todayDate = new Date();
                todayDate.setHours(0, 0, 0, 0);

                if (selectedDate < todayDate) {
                    showError(debutLocation, errorDebutLocation, 'La date de début ne peut pas être dans le passé.');
                    return false;
                }

                hideError(debutLocation, errorDebutLocation);
                
                // Mettre à jour la date minimale de fin
                finLocation.min = value;
                
                // Revalider la date de fin si elle existe
                if (finLocation.value) {
                    validateFinLocation();
                }
                
                return true;
            }

            // Validation du champ fin
            function validateFinLocation() {
                const valueDebut = debutLocation.value;
                const valueFin = finLocation.value;
                
                if (!valueFin) {
                    showError(finLocation, errorFinLocation, 'La date de fin est obligatoire.');
                    return false;
                }

                if (!valueDebut) {
                    showError(finLocation, errorFinLocation, 'Veuillez d\'abord saisir la date de début.');
                    return false;
                }

                const dateDebut = new Date(valueDebut);
                const dateFin = new Date(valueFin);
                const todayDate = new Date();
                todayDate.setHours(0, 0, 0, 0);

                if (dateFin < todayDate) {
                    showError(finLocation, errorFinLocation, 'La date de fin ne peut pas être dans le passé.');
                    return false;
                }

                if (dateFin < dateDebut) {
                    showError(finLocation, errorFinLocation, 'La date de fin ne peut pas être antérieure à la date de début.');
                    return false;
                }

                hideError(finLocation, errorFinLocation);
                return true;
            }

            // Événements blur (quand on clique en dehors du champ)
            debutLocation.addEventListener('blur', validateDebutLocation);
            finLocation.addEventListener('blur', validateFinLocation);

            // Événements change (quand la valeur change)
            debutLocation.addEventListener('change', function() {
                validateDebutLocation();
                // Effacer la date de fin si elle devient invalide
                if (finLocation.value && new Date(finLocation.value) < new Date(debutLocation.value)) {
                    finLocation.value = '';
                    hideError(finLocation, errorFinLocation);
                }
            });

            finLocation.addEventListener('change', validateFinLocation);

            // Validation lors de la soumission du formulaire
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const isDebutValid = validateDebutLocation();
                const isFinValid = validateFinLocation();
                
                if (isDebutValid && isFinValid) {
                    alert('Formulaire valide ! Données prêtes à être envoyées.');
                    // Ici vous pouvez soumettre le formulaire
                    // form.submit();
                } else {
                    alert('Veuillez corriger les erreurs avant de continuer.');
                }
            });
        });
    </script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // === FONCTIONNALITÉ 1: Auto-remplissage description bien ===
    const bienSelect = document.getElementById('{{ form.bien.vars.id }}');
    const descriptionTextarea = document.getElementById('{{ form.descriptionBien.vars.id }}');
    
    if (bienSelect && descriptionTextarea) {
        bienSelect.addEventListener('change', function() {
            const bienId = this.value;
            
            if (bienId) {
                descriptionTextarea.value = 'Chargement de la description...';
                descriptionTextarea.disabled = true;
                
                fetch('{{ path('get_bien_description', {'id': '__ID__'}) }}'.replace('__ID__', bienId))
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            descriptionTextarea.value = data.description;
                        } else {
                            descriptionTextarea.value = '';
                            console.error('Erreur:', data.error);
                        }
                    })
                    .catch(error => {
                        console.error('Erreur lors de la récupération de la description:', error);
                        descriptionTextarea.value = '';
                    })
                    .finally(() => {
                        descriptionTextarea.disabled = false;
                    });
            } else {
                descriptionTextarea.value = '';
            }
        });
    }
    
    // === FONCTIONNALITÉ 2: Masquer/Afficher champs de location ===
    const typeTransactionSelect = document.getElementById('{{ form.typeTransaction.vars.id }}');
    const locationDurationSection = document.getElementById('locationDurationToggle');
    const debutLocationInput = document.getElementById('debutLocation');
    const finLocationInput = document.getElementById('finLocation');
    
    // Fonction pour masquer/afficher les champs de location
    function toggleLocationFields() {
        const selectedType = typeTransactionSelect.value;
        
        if (selectedType === 'Vente') {
            // Masquer les champs de location
            locationDurationSection.style.display = 'none';
            
            // Retirer l'attribut required et vider les champs
            if (debutLocationInput) {
                debutLocationInput.removeAttribute('required');
                debutLocationInput.value = '';
            }
            if (finLocationInput) {
                finLocationInput.removeAttribute('required');
                finLocationInput.value = '';
            }
            
        } else if (selectedType === 'Location') {
            // Afficher les champs de location
            locationDurationSection.style.display = 'block';
            
            // Remettre l'attribut required
            if (debutLocationInput) {
                debutLocationInput.setAttribute('required', 'required');
            }
            if (finLocationInput) {
                finLocationInput.setAttribute('required', 'required');
            }
            
        } else {
            // Si aucun type n'est sélectionné, masquer par défaut
            locationDurationSection.style.display = 'none';
            if (debutLocationInput) debutLocationInput.removeAttribute('required');
            if (finLocationInput) finLocationInput.removeAttribute('required');
        }
    }
    
    // Initialiser et écouter les changements
    if (typeTransactionSelect) {
        toggleLocationFields(); // Exécuter au chargement
        typeTransactionSelect.addEventListener('change', toggleLocationFields);
    }
});
</script>

<script>
function validateEmailField(input) {
    const value = input.value;
    const errorContainer = input.nextElementSibling;

    // Expression régulière basique pour vérifier un email
    const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    if (!regex.test(value)) {
        input.classList.add('is-invalid');

        if (!errorContainer || !errorContainer.classList.contains('invalid-feedback')) {
            const errorDiv = document.createElement('div');
            errorDiv.classList.add('invalid-feedback');
            errorDiv.textContent = 'Veuillez saisir un email valide (ex : exemple@domaine.com)';
            input.parentNode.appendChild(errorDiv);
        }
    } else {
        input.classList.remove('is-invalid');
        const feedbacks = input.parentNode.querySelectorAll('.invalid-feedback');
        feedbacks.forEach(el => el.remove());
    }
}
</script>
<script>
function validateFutureDate(input) {
    const selectedDate = new Date(input.value);
    const today = new Date();
    today.setHours(0, 0, 0, 0); // Ignore l'heure

    const existingError = input.parentNode.querySelector('.invalid-feedback');

    if (selectedDate < today) {
        input.classList.add('is-invalid');

        if (!existingError) {
            const error = document.createElement('div');
            error.classList.add('invalid-feedback');
            error.textContent = 'Veuillez choisir une date future ou aujourd\'hui.';
            input.parentNode.appendChild(error);
        }
    } else {
        input.classList.remove('is-invalid');
        if (existingError) existingError.remove();
    }
}
</script>

<style>
    @media print {
        body * {
            visibility: hidden;
        }
        #form-container, #form-container * {
            visibility: visible;
        }
        #form-container {
            position: absolute;
            left: 0;
            top: 0;
        }
    }
     .error-message {
            color: #dc3545;
            font-size: 0.875em;
            margin-top: 0.25rem;
            display: none;
        }
        .error-message.show {
            display: block;
        }
        .form-control.error {
            border-color: #dc3545;
        }
        textarea[readonly] {
    background-color: #f8f9fa !important;
    cursor: not-allowed;
    border-color: #dee2e6;
}

textarea[readonly]:focus {
    box-shadow: none;
    border-color: #dee2e6;
}
</style>
