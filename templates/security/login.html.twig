{% extends 'baseInscription.html.twig' %}

{% block title %}HabiLux-Connexion{% endblock %}

{% block body %}
<style>
    .custom-login-container {
        border-radius: 30px !important;
    }

    .custom-image-wrapper {
        padding: 10px;
        position: relative;
    }

    .custom-image-wrapper img {
        border-radius: 20px;
        object-fit: cover;
        height: 100%;
        width: 100%;
        display: block;
    }

    .custom-overlay {
        position: absolute;
        top: 10px;
        left: 10px;
        right: 10px;
        bottom: 10px;
        border-radius: 20px;
        background-color: rgba(0, 0, 0, 0.4); /* couche noire avec 40% d'opacité */
        z-index: 1;
    }

    .error-message {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
        display: none;
    }

    .is-invalid {
        border-color: #dc3545 !important;
        box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25) !important;
    }

    @media screen and (min-width: 1500px) {
        .container {
            max-width: 1700px;
        }
    }
</style>

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="row bg-white border shadow overflow-hidden custom-login-container">
                <!-- Partie gauche : formulaire -->
                <div class="col-md-6 p-5">
                    <div class="form-icon-left">
                        {% if app.user %}
                            <div class="alert alert-info mb-3">
                                Vous êtes déjà connecté(e) en tant que {{ app.user.userIdentifier }}, 
                                <a href="{{ path('app_logout') }}" class="text-primary">Me déconnecter</a>
                            </div>
                        {% endif %}

                        {% if error %}
                            <div class="alert alert-danger">{{ error.messageKey|trans(error.messageData, 'security') }}</div>
                        {% endif %}

                        {% for label, messages in app.flashes %}
                            {% for message in messages %}
                                <div class="alert alert-{{ label }}">{{ message }}</div>
                            {% endfor %}
                        {% endfor %}

                        <h4 class="mb-4">Me connecter</h4>
                        <form method="post" id="loginForm" novalidate>
                            <div class="mb-3">
                                <label for="inputEmail" class="form-label">Email</label>
                                <input type="email" value="{{ last_username }}" name="email" id="inputEmail" class="form-control bg-light" autocomplete="email" required autofocus>
                                <div class="error-message" id="emailError">Veuillez saisir une adresse email valide (ex: test@test.com)</div>
                            </div>
                            <div class="mb-3">
                                <label for="inputPassword" class="form-label">Mot de passe</label>
                                <input type="password" name="password" id="inputPassword" class="form-control bg-light" autocomplete="current-password" required>
                                <div class="error-message" id="passwordError">Le mot de passe est obligatoire</div>
                            </div>
                            <input type="hidden" name="_csrf_token" value="{{ csrf_token('authenticate') }}">
                            <div class="mb-3 form-check">
                                <input class="form-check-input" type="checkbox" name="_remember_me" id="rememberMe">
                                <label class="form-check-label" for="rememberMe">Se souvenir de moi</label>
                            </div>
                            <button class="btn btn-primary w-100" type="submit">Me connecter</button>
                            <div class="text-center mt-3">
                                <a href="{{ path('app_forgot_password_request')}}" class="text-dark d-block py-1">Mot de passe oublié</a>
                                <a href="{{ path('app_register') }}" class="text-dark d-block py-1"><u>Pas encore inscrit(e) ? M'inscrire</u></a>
                            </div>
                        </form>
                    </div>
                </div>

                <!-- Partie droite : image avec overlay -->
                <div class="col-md-6 d-none d-md-block position-relative custom-image-wrapper">
                    <img src="{{ asset('assetsFront/img/1.jpg') }}" alt="Connexion" style="height:577px;">
                    <div class="custom-overlay"></div>
                </div>

            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('loginForm');
    const emailInput = document.getElementById('inputEmail');
    const passwordInput = document.getElementById('inputPassword');
    const emailError = document.getElementById('emailError');
    const passwordError = document.getElementById('passwordError');

    // Fonction pour valider l'email
    function validateEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }

    // Fonction pour afficher/masquer les erreurs
    function showError(input, errorElement, message) {
        input.classList.add('is-invalid');
        errorElement.textContent = message;
        errorElement.style.display = 'block';
    }

    function hideError(input, errorElement) {
        input.classList.remove('is-invalid');
        errorElement.style.display = 'none';
    }

    // Validation en temps réel pour l'email
    emailInput.addEventListener('blur', function() {
        const email = this.value.trim();
        
        if (email === '') {
            showError(emailInput, emailError, 'L\'adresse email est obligatoire');
        } else if (!validateEmail(email)) {
            showError(emailInput, emailError, 'Veuillez saisir une adresse email valide (ex: test@test.com)');
        } else {
            hideError(emailInput, emailError);
        }
    });

    // Validation en temps réel pour le mot de passe
    passwordInput.addEventListener('blur', function() {
        const password = this.value.trim();
        
        if (password === '') {
            showError(passwordInput, passwordError, 'Le mot de passe est obligatoire');
        } else {
            hideError(passwordInput, passwordError);
        }
    });

    // Validation lors de la soumission du formulaire
    form.addEventListener('submit', function(e) {
        let isValid = true;
        
        // Validation de l'email
        const email = emailInput.value.trim();
        if (email === '') {
            showError(emailInput, emailError, 'L\'adresse email est obligatoire');
            isValid = false;
        } else if (!validateEmail(email)) {
            showError(emailInput, emailError, 'Veuillez saisir une adresse email valide (ex: VotreEmail@exemple.com)');
            isValid = false;
        } else {
            hideError(emailInput, emailError);
        }

        // Validation du mot de passe
        const password = passwordInput.value.trim();
        if (password === '') {
            showError(passwordInput, passwordError, 'Le mot de passe est obligatoire');
            isValid = false;
        } else {
            hideError(passwordInput, passwordError);
        }

        // Empêcher la soumission si les données ne sont pas valides
        if (!isValid) {
            e.preventDefault();
        }
    });

    // Masquer les erreurs quand l'utilisateur commence à taper
    emailInput.addEventListener('input', function() {
        if (this.classList.contains('is-invalid')) {
            hideError(emailInput, emailError);
        }
    });

    passwordInput.addEventListener('input', function() {
        if (this.classList.contains('is-invalid')) {
            hideError(passwordInput, passwordError);
        }
    });
});
</script>

{% endblock %}